apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "postgres.fullname" . }}
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgres.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          # livenessProbe:
          #   exec:
          #     command:
          #       - bash 
          #       - "-c" 
          #       - |
          #         PGPASSWORD=$POSTGRES_PASSWORD psql -U$POSTGRES_USER -d$POSTGRES_DB -c SELECT 1
          #   initialDelaySeconds: 45
          #   timeoutSeconds: 2
          # readinessProbe:
          #   exec:
          #     command:
          #       - bash 
          #       - "-c" 
          #       - |
          #         PGPASSWORD=$POSTGRES_PASSWORD psql -U$POSTGRES_USER -d$POSTGRES_DB -c SELECT 1
          #   initialDelaySeconds: 15
          #   timeoutSeconds: 2
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-credentials
                  key: app.db.password
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-credentials
                  key: app.db.user
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgres.fullname" . }}-credentials
                  key: app.db.name
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: pgdata
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 4Gi
  {{- end }}
