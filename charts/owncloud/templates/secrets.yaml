# https://doc.owncloud.com/ocis/next/deployment/container/orchestration/tab-pages/generic-secrets-tab-1.html
---
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  jwt-secret: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

---
apiVersion: v1
kind: Secret
metadata:
  name: machine-auth-api-key
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  machine-auth-api-key: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

---
apiVersion: v1
kind: Secret
metadata:
  name: storage-system
type: Opaque
data:
  # how to generate: base64 encode a UUID V4
  # example generation command: `cat /proc/sys/kernel/random/uuid | tr -d '\n' | base64`
  user-id: MDVmYzVlMWEtN2Y5Ni00ZjVjLWEwM2EtMWUzMTAwYzQxNzFjCg==

  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  api-key: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

---
apiVersion: v1
kind: Secret
metadata:
  name: storage-system-jwt-secret
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  storage-system-jwt-secret: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

---
apiVersion: v1
kind: Secret
metadata:
  name: transfer-secret
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  transfer-secret: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

---
apiVersion: v1
kind: Secret
metadata:
  name: thumbnails-transfer-secret
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  thumbnails-transfer-secret: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

# https://doc.owncloud.com/ocis/next/deployment/container/orchestration/tab-pages/builtin-user-mgmt-secrets-tab-1.html
---
apiVersion: v1
kind: Secret
metadata:
  name: ldap-bind-secrets
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  reva-ldap-bind-password: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  idp-ldap-bind-password: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  graph-ldap-bind-password: VytmZXJrUWNaWmVYMGhLbnlJa3ltM2I3d2VuU1RXTlBJdHZJTHNtK3E1MDZvSXJNcmJObytYRUNXUVNHem9HcAo=

---
apiVersion: v1
kind: Secret
metadata:
  name: ldap-ca
type: Opaque
data:
  # how to generate: base64 encode the pem-encoded certificate of a (self-signed) x509 certificate authority
  # example generation commands:
  #  - `openssl genrsa -out ldap-ca.key 4096`
  #  - `openssl req -new -x509 -days 3650 -key ldap-ca.key -out ldap-ca.crt`
  #  - `cat ldap-ca.crt | base64 | tr -d '\n' && echo`
  ldap-ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZFakNDQXZvQ0NRQ0JhN0h3WXBqTkxEQU5CZ2txaGtpRzl3MEJBUXNGQURCTE1Rc3dDUVlEVlFRR0V3SkUKUlRFUU1BNEdBMVVFQ0F3SFFtRjJZWEpwWVRFUE1BMEdBMVVFQnd3R1RYVnVhV05vTVJrd0Z3WURWUVFEREJCdgpkMjVqYkc5MVpDNWxjbkJtTG1SbE1CNFhEVEl6TURVeU1USXlNVEF3TlZvWERUTXpNRFV4T0RJeU1UQXdOVm93ClN6RUxNQWtHQTFVRUJoTUNSRVV4RURBT0JnTlZCQWdNQjBKaGRtRnlhV0V4RHpBTkJnTlZCQWNNQmsxMWJtbGoKYURFWk1CY0dBMVVFQXd3UWIzZHVZMnh2ZFdRdVpYSndaaTVrWlRDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0lQQURDQ0Fnb0NnZ0lCQU4wWDFKcWdBR3ljcFZDQmZ4bkN0b0JaNEc2MnFpTmlLRWI0VG40WW96ZXV5TTE2Cm8rWkJFNEkyYXplOHpSVE9IeEN2M3hsNDF5bHVxTDF5Ump3MlZPWkN3ZW1pQjdxK1VMNUkraFFMc2wwelZXQ0QKbENPckhqY1lLMFY5Um04Qkl5WW9uZ2lCRkQ3RXlpQkQ5dzhwR29iV2ZDcStRS1FTclM4dGd0WW5NQUFCa2k4cwplUHYzYUY3MUZveXZzSVo3Q3Jtc0ErdUErd2tUWHVNMTRwMjhCMmpjQkwxYU82aUdXMjZGQVlLbVVNa0dzUkNHCjh4UGNEVHRPVzc5MEFQOE5DNmx6ZWlIa0VZbzVjQUZObkFEcVlGKzNZOFRiOE9QNTVrcXdDbTFWNlpVTUNia2sKNXBrS2xyVW9kQ2YxNUdvMFBGYjRaQnp6bE1USUYrUWczZEpZYlV1TWl4RmRabnZMNmVOQnlreDZRdWk2NFZ5Vwp1a2wyZlJvZ2hSYVZqa2s4ZTU5aHZaSW1wYm82eWhBRFJLSUE2aExSYmRtaENGSm40WGdRN3E1VUtGKytCZ2RCClVPakFNejd6MVhRZG9VRWJkeldhK3ZKTEZYTWZ6d0VkNVBXV1N1WDdnMFM3M2V6K0tld3QrL0Q1akxWWkNFR0QKQ21YMmpNR2JkenIybitWaXgzRTBaOVZqUjdJQUZHTmxLbHN1eFJCczJpTHpYald4MnFZT2M5K2I4QTNMdWZDQwpOSUROWkNyZzUvK0xRWXJLa2FuR1pscE0vNStVdVY2bmdkSk5mbWdnMythbjVuZ0tUMEl2T3BQL0p4dlR0U1BBCk45M1JOR01abU9TT3JidGFZVGFNMUVYdWN3QlZ5bDQxTzVJY0tZcDFxSVppWVdOMHJxUmdJTjRVYlhzakFnTUIKQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFMZmE3aXNtTGZiTHJYVDg0TmtXcVpKZGhRUUV2ZkZnUFNBVwpDdnI2VFVqU2E5UUg5bDluRFltMWdqbjFXZDZLVUZEa01PTE5rK0JsZ01lTzc2a1ZIS1BwQUF5aUY0YnNMYlVGCi9uUVVraDltYkFHMFJhNkJ3dVlLdit0NDVNcmdSR3hBMEF3Y2pSanY0SU1Sb2YzMEtUSlE2L2VuMDVNUnloSHQKTVpwYVppNnpETWt0TjJ1SGtQRTc1djErQVBRZ21nZzdTdG9oZFJua3kzaDdOZXVkOXRHNDFabmxvUWlJM2dNeApoK2VUSHUzM2E5QlFuMTMwSmVQcWRXSDJjbVhERE9NVnIvQzh6d0FiNDA2VGdnL0dLMzF5TTl5Nll4TGpqeEViCnJPWmN1SzNyR3E0SnBGTGExaDRPdHcxZ0FzdFlpMWhaZG43dGh1WFZuRTN4ZXB6alRxbTEreTA3Yk9QVGM4eXEKR3A2dnlJNzZGMXc0aG1ldVFaRE8vY1BTNnptR0l3VG42eGtpLzgrcHA2V0htM2w2TTljUU4rZ2luenhDVWR6UgpiL3NsUUZmWFJRSUpmTnV1bytYVDRNekNBZUV4RWZNdHFSV0c1YlBHTXRmWE1KY3lDT3YweDB5K2Q3V2lDZmQwCmdjQlUxcEIvb0ZWK1VrMGM2aWU5WTZxV3NlZzkwSEJmaGpSblVXTXZCTTU0RzY1WVZGRGwyZUNsL0REd05wRTEKMS9CbU5QQlZ4eE1qWEFGRitTZFJ2a3g5NFA2ZDVqVkRWeWc1UVF3RHFvaHg3OEpjVE9aSTFoSml0YWdlbFhwcQpLTkh6UitkN1JCQU1iUXdJc3FVZjlyMmNVVm5qK2tEWjRKdE5ZZ2JTRGcvL3dtTUFXSUxwbEV4RFhrelE1eGkwCmU1a2tmb3FXCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K

---
apiVersion: v1
kind: Secret
metadata:
  name: ldap-cert
type: Opaque
data:
  # how to generate: base64 encode a private key (eg. ed25519, ensure that you use reasonable long key size)
  # example generation commands:
  #  - `openssl genrsa -out ldap.key 4096`
  #  - `cat ldap.key | base64 | tr -d '\n' && echo`
  ldap.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBb0hSTVV5ODRvN2VFZ2tBRjN2NUZRdkNEQWRMSEdKYk5aL1hSUThoQzA4R1pFZml5Ck1YTFdYMzd1ZDlUVy9EMzNLbVUwVzBocjEzOFVzb2RIZjllMEhQSnJQdU1LWERjL20vdDViNVZWc2d2dyt6NHUKcUpHSkFrVXFuQkhwR1Rqakh0dEZWN0xIM3MxRVVsVkhZbmxkU0VWaUZ2NW1lZCtZN09rSG5admVodisvU0FHbgpDdW1pWHF4MS92anU3U3JwWTc2NFArWEdsYTBxWmpGckpIaFNlN2R6clE0ZXRjYTY2ZUFZcDRjK1ArcnAyeUhXCmViOWRJeDRLaThxVVNwOHZaYTVNMjg4d2p2K2t0RFY4cmloaEtvL3ZGVWN3elVEVzZCRFBBanU0cWxraytocVcKeTVkSkEzOHVpdmpuZUpvK09iL2IxWTZlci9DeTdCKzA5NHN3aW1ERjVGZTBWTCtPeXNTRHUrbUY3K1NadGhRVApuRExDRHhFc0hITDFJUGVrTVBYRHFVWDV5Q2hIY2liT1VWN25kRFliRmdsV0pxTkFhNzFXNGhvT3l2aUVudzJ5CkhrdnVLUXB2MDNMTmxGdmFkRUdnSkQ2ajB1TlpueU5HSFMzUkZleENWVEdYcm54OEpsdlN0Q3dPUzJ2QjR4b20KYUI5czkyYXhsWENubjBuSTNUTSsrUWRXUDFIT3U5WUlqR1RGY2kzejA5NHVhaERZYVh4Ull2bHVHeTR6cXdOdwpRb3QxSmNnR2l0Wnk0RTZjdzE0ZHpva1BCbEI2bm83S2pFbC9UNjBOTW5uL0FLa1kxdWdjcXZua3NBVjM2VFNHCitlbkxKeDA3K0s2dmlMMkEvVE03VVNtdDdhaTRKK0xDR0xTRnZGcnB6VW11MGFlbFhhZDVZams0elpNQ0F3RUEKQVFLQ0FnQmpwVlh4SXhaTnRoNjR0UUh3Wm9Day9iQ2VaVVAzNVU5VERMb1ZHajFHUEtqUEhGK3RqZC9NRm93SwpKMGdNQm4rRStLejNNNWFsa2VwTXBPNm1XbE1rMXZmN2FneDVFR2FVZkN3Q08vK29Qdm85VFhTMGd3MVBONTBxCnA0VFhnUmlyaFFrZldZdit0Z09FRGlueTRlUW9pYzVNOFZpNnZ6MjlnMHFUZXNWTG1YQTFTN0Z0ZVlLNHdPblcKbXNubXlBdUJRbVF5YW9SVlYrRkk3Yy9ZS2xFdk85SysybElBR1piaXY2VVFCVkdIYUdBckVteWIxMWdFQXhnUgprSkZmZGxSOUZTM3VKRkhIdk1PUWx0Y0RZVmhXa21Tc0ZqWWNnZlAwMHR0OFM1SjNXRDA2aFdDNHR3OUUrS3J5CjYzajAwUFZyNzlhYVhhUDNKOGcyRThyVElNSFhjbDNaQzJwT3ZKaTY0MGRjV0podWt4SnliOGx4UWRZSHUxK3AKNHdTajVucGJNOE04cWJpZUgzTjV3bE02RSt0S2Y5UWRaNmhNcDMxVGp0Qmo3dWtaR2kycy9pUWJNZnZVaDZSQwp1bUVKQXNVaU5KeEU2cytsbU9WTndJT2tjblhSV3JzU1V2WUwzZis0NzJSaHQvWkhvWmx3Q2QzWGo5ZzlNV0xGCkpQZ2NsV1VOWnc4NmZlZmNiTks3S21vME9YU1kwVWw5UkJYV0ZrY1hKWTUwWGxGZTZKMTNocnFQMTNWb2pUcDYKWFFLWm1tN0xrZENaS2E3UnJVVWFkWm5BMWkrT09FTU52UWcvdGlxUVI0Sllxc3hYbHFFU1FOVFZNOURpbHVFcwpsWCs1UU9KVG5FTGsxK1pTSzRiQzFFTk5CV3hrQXR0dTROVlpnb1VXdHUxUlJxUk9BUUtDQVFFQXkzQjJFSkFECnEzQjNxaEI3YWh6QitPcmxMZk5IWVVHNnZFaWtnamhYQnlvT01yNG9IRzViU1FtZlhVYy8wSGZWc3pXVVRmZ3AKSk53NE9YMmVNY2hpcFpvK1FIOWlVcDVGTVZNUUZZK0RQTWR0ZWFnRDZMWjhMT3h4YzVPTTNwRW9LK0VZWFVHSAo3Y2FSdU5rbDJmSkVKY294MGdIckJ6dDA5ZWIrbUtyOGdXVHJKMkVBOEpLbks3OGszOGo0dExEdFRYK2o3ZjAvCmZCbGkxNnhJVnhzUTFRejREZ1QwQlBYWXlrZG92K1hlejJRWUtlemdTaTlYOElUb3hJcUlhckNlYWhLV09aUm0KOXNDdmRYMUM1Qy9jYWNQbTZRZVpSZ0hVdFRLMWlGbkhoa1pFazdwUEtHZGF0MEJPOXJuODJhVkNnNllWT1lmYwpBQlROUnpXc2RVTDAwd0tDQVFFQXllakxmSlhNY1lvd0FXYnpnbC96YzkydDFtQ0lSa1dmT1NRbGJNSkh5ek9OCllCUUUzZ2hFeXMxQVVqMC9XamlVWnhRZXRHbVB6SG1FZW1PVGQzcEM5MTMzajBYeXFHNEQrdmpydXB5U0VPdkwKM3d6Zm13TVphNDdnTlVscVRpRGgvNXArbFlrYlBEMEZvbW04YjdLQzI4bHdUSFZLNmxxSjJqeGxWTDcxckszbAp2aGd0ekRubjRCOUtGNEE0Z3R6dFRZZ2w0NzVmeEpleFB6M0MwbVRGTW1jaDFoVUxDTXFnKzUwNGJ1Rm1kTlB4CkhtMUxrdUhTNFlvNnhHbGpNMnJCYWxJYWJWQmhHT2Y2QyszdHpTb2huQm9BT0VnRGEwTzc0SnBjbURTejV3WGIKaDBqWUxBYjdmczg4d3doNlpvMytUN3VScEg0TU9UK0t2WHNpdFE1TVFRS0NBUUVBcWVuL0lpdzJkRzBWOVJ1WgpDSEtHYS9FOGd4bHE1OGN2UU96blFiL3VxQlF2RWFDUy9kUUtPRUZxTWswODlrL3dVNktQZ0dPaGNhRGc4TnVEClVnOE1uVVhyY3BFeVBORGw5NkZwa0toeHMwVFpvYjk3ckZVbDk1dHYwbGxOVWVNcEN5VVE1V3JETGd3b1Q1eEcKS2ZkWGhieVB5ZGhDUmFNYU4vdTdieVY0aWxZUXRhNG1TOGdoQ2IrMis1WHVhM1JPYnVrSnNNOVF3OFNzTW5nNQpYMDlDeXI3dk96NVYxUUxGRTRWNjdyUCtXWGMvVzF6MW8rQlE4WmtBbEk4a0N3QUMvNU1RbDN6a1ZubHUwcEZSCldpYkRVQzhINEYreFc3QlJ5UmxXVjFDcy9mQVlmTTRpS1J2UnY3WmRmV0t2MWRSYWJudzd3L1krQUc5ZldIZHkKMSttWmN3S0NBUUVBdk5XUlFtS2pRMmtYUHFoM2crNlROVUVWYlJMNVFLZXFvM2x2MndqVXRuSHZmZlViSEVFbApmWHA2OXE4N2lmaXlxcmtCZ24vYnNrUFFKOXJyTjJuTUthZmplVWJWREx0ZjA2QnNieW94M2N0NTc1RU5xOTg1CkxnUUJJelVYVEJ5cTRUQXZ4VkRtZk84aFR1V1BDL1FyT0wxcjNzWXdHNEF6dnp5UEZMUkg5b2pvL21HRXE2VlkKZko4bTMxWFhCR1QxTjNibTROblNuWDIxa3MwRFlWeEhwYjBZd3kwSkZkN1VzcDQzQWxTaVN3OVJTY0MwVnBvSApiVktuWmJ5ZXY1N1BaODJEMDhyQ0ZOWVlZSUhVenZYaFd5cGlIRUVWbVlOT3VtQUR5NEkyNHhEeVlOTTdBZXBCCjJqYWR3RlkwaTZldk9nalZ6TDdxVmJ4YzJKdktPUVUzUVFLQ0FRQXNVUjl0dGVTSHlpQTkxMytBaFY2Q05OakUKUWE0VStCb1llbXdCelpTQXVFWGxaVDhTdkFlbGZCL2tFT0NtUFluaXFDM051MW5DSk1OblhxQ1cwVFdNeUpBbApOMzhxQWdiWVJNYU9nNElQODg5MWFSN2I4bXdveGFPRVpvcUFoYjJRa1h2TVNuWW1DMk8yckNzcnhYOFlXZkdDCmIvQzRMNms4STBQc1crZXZObzVCdHk1OUpjU1dVL1J4L3E1U3dBRVNxOHpEaWFyekhraml4VklEQ3BweVA0Y0UKYUIvcTFnbkcwL25qY1BrRk4yVkZRelY1b2ZWU1BpdnV0MktFaEtnNXVXek9VamZzRlhIaHlFTjJNZHdyVVhrUgpKckxZVWdwY1ZjYVdDcHphZ3VPUDl1eTY0SU9ZRURrazJ3aGRjL0QzaFpDN2Rma3l6MHdML0FGWGZtTFYKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K

  # how to generate: base64 encode a x509 certificate signed by the above CA, using the above private key.
  # example generation commands:
  #  - `openssl req -new -subj "/CN=idm" -key ldap.key -out ldap.csr`
  #  - `openssl x509 -req -extensions SAN -extfile <(cat /etc/ssl/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:idm")) -days 365 -in ldap.csr -CA ldap-ca.crt -CAkey ldap-ca.key -out ldap.crt -CAcreateserial`
  #  - `cat ldap.crt | base64 | tr -d '\n' && echo`
  ldap.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU3akNDQXRhZ0F3SUJBZ0lKQUlBb3BlZ1FiS0hLTUEwR0NTcUdTSWIzRFFFQkN3VUFNRXN4Q3pBSkJnTlYKQkFZVEFrUkZNUkF3RGdZRFZRUUlEQWRDWVhaaGNtbGhNUTh3RFFZRFZRUUhEQVpOZFc1cFkyZ3hHVEFYQmdOVgpCQU1NRUc5M2JtTnNiM1ZrTG1WeWNHWXVaR1V3SGhjTk1qTXdOVEl4TWpJeE1EVTJXaGNOTWpRd05USXdNakl4Ck1EVTJXakFPTVF3d0NnWURWUVFEREFOcFpHMHdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUsKQW9JQ0FRQ2dkRXhUTHppanQ0U0NRQVhlL2tWQzhJTUIwc2NZbHMxbjlkRkR5RUxUd1prUitMSXhjdFpmZnU1MwoxTmI4UGZjcVpUUmJTR3ZYZnhTeWgwZC8xN1FjOG1zKzR3cGNOeitiKzNsdmxWV3lDL0Q3UGk2b2tZa0NSU3FjCkVla1pPT01lMjBWWHNzZmV6VVJTVlVkaWVWMUlSV0lXL21aNTM1anM2UWVkbTk2Ry83OUlBYWNLNmFKZXJIWCsKK083dEt1bGp2cmcvNWNhVnJTcG1NV3NrZUZKN3QzT3REaDYxeHJycDRCaW5oejQvNnVuYklkWjV2MTBqSGdxTAp5cFJLbnk5bHJremJ6ekNPLzZTME5YeXVLR0Vxais4VlJ6RE5RTmJvRU04Q083aXFXU1Q2R3BiTGwwa0RmeTZLCitPZDRtajQ1djl2VmpwNnY4TExzSDdUM2l6Q0tZTVhrVjdSVXY0N0t4SU83NllYdjVKbTJGQk9jTXNJUEVTd2MKY3ZVZzk2UXc5Y09wUmZuSUtFZHlKczVSWHVkME5oc1dDVlltbzBCcnZWYmlHZzdLK0lTZkRiSWVTKzRwQ20vVApjczJVVzlwMFFhQWtQcVBTNDFtZkkwWWRMZEVWN0VKVk1aZXVmSHdtVzlLMExBNUxhOEhqR2lab0gyejNackdWCmNLZWZTY2pkTXo3NUIxWS9VYzY3MWdpTVpNVnlMZlBUM2k1cUVOaHBmRkZpK1c0YkxqT3JBM0JDaTNVbHlBYUsKMW5MZ1RwekRYaDNPaVE4R1VIcWVqc3FNU1g5UHJRMHllZjhBcVJqVzZCeXErZVN3QlhmcE5JYjU2Y3NuSFR2NApycStJdllEOU16dFJLYTN0cUxnbjRzSVl0SVc4V3VuTlNhN1JwNlZkcDNsaU9Uak5rd0lEQVFBQm94SXdFREFPCkJnTlZIUkVFQnpBRmdnTnBaRzB3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUhES0tUbXZBbUw1UkI1MGVFSUMKc2xsaDdEQWhpcyt3bkk0L1BFcWo2VllObmRjN0Nja2ZWZ3I1YzE4V2RYUFArOHYrK0hZVWRMYyt6bGhlR1hQMApncCtLUFBqajc4dERnUlFMbDhTNitBS2hHVmRlc29jY0R0SmkvRTFNU3lIZXlkNW1iL1F3VUJJQkpDQldweDFHCmhZSm1odW1Md25QaHdnTXhaUmt4eUZuWEYrOWlVblBkdnRhZ2JRalVxcDhyV0xwL1NXSzZOSVU4Y2IzSXQwdGQKc0J6VXdUTzVQSWhJaSsrdWkveVZRcElzYWZFZW4rODlOQ1lQZ3NYa3k2clQxQ04wY3Fmek82a3M0ZkdvUlRsdQo1cmRZcUErTTdCVkI4QTdydk9YRkNoKzUxQUVOSUtzWjJjbFA1b3I2bUkyT1VSWE54cUttYVFvYU5uUmg2MU9zCkhwc0owVEp6eW5rck5IVkVEMitKRGhOak9va1kyOG0zNVJKYUdxVU1Lb0tLV1Z3emNWanpka2hUeFgybVlaSW0KRWNFdERrZDlFbE9wcjh2bElxZlVFU3JSYmhWZ3ZhMS9mcGZnZmkyODZOQjB4VUhtWmVrLzBGVHZ4ZUVCbFIwRQpzVU5ZZEJheFRjVVozRkJyRUVVbWFTVTcvWmtGWjU2TGpzeW9kS3k4Tyt2RURrNXRnZVRRSU00UHczYVJHQlVUCk53OERLTmpqcUNsUm13TWsyUkJRUTNqK1dNSE5zQldkNkNVVk9wRGVFL0NzRmlqcjB3dk95NVBYU1J2TEhTa0YKOXNjWDVuM3ZjOGsyMkJPc2ZucktkME1EOTdlaHFNdE16SU9oazhCSzBpN1hrZGh5aEFPLytXYWJZZFFYaWVzZwpmU2pTWmdPak1oVmxocXYvdVc5WjdZdUsKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=

---
apiVersion: v1
kind: Secret
metadata:
  name: admin-user
type: Opaque
data:
  {{- if .Release.IsInstall }}
  user-id: {{ uuidv4 | b64enc }}
  {{ else }}
  user-id:  {{ index (lookup "v1" "Secret" .Release.Namespace "admin-user").data "user-id" }}
  {{ end }}

  {{- if .Release.IsInstall }}
  password: {{ randAlphaNum 48 | b64enc }}
  {{ else }}
  password:  {{ index (lookup "v1" "Secret" .Release.Namespace "admin-user").data "password" }}
  {{ end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: idp-secrets
type: Opaque
data:
  # how to generate: base64 encode a random 32 byte string (mixed characters)
  # example generation command: `openssl rand 32 | base64`
  encryption.key: +XvN+ayuSemcvm6IWm9SqsNTRZ9xWBkgPZ7yLu5g46c=

  # how to generate: base64 encode a private key (eg. RSA, ensure that you use reasonable long key size)
  # example generation command: `openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 2> /dev/null | base64 | tr -d '\n'`
  private-key.pem: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRRHhmSkhKWUJ1L1VwYWcKODJvSkkwa0pZSlRsTnZuaDV2WWt1K2laNk8xUmdYYU5uRFlLN0xkUzkvV1F0Q21sQVVhN01YWXFQTVFkTmhsZworV0w2Risyby80ZDI3Q0dDVTZQNEpSbm1OeCtwNDRHaURrR2lvK3RDbVVjNnk2MzlyMlV5TnVOemM4WHFQcmlZCnBDWmhaZnZvWThSVFVMa3pXc1RlQ0ZUWUxTRU42ZlB6TEQ3UDhaU3VTZWxZSlYxUkl2cVFhZnZmZ3FONm9LMEkKZkZQQUNqd0t4TFFNMGxCWklMcmtGNS9XT2R4bnFydzdzSlRLSW9FU0RrYVF1bFc5K0ZyREcxMXBTK1JZZXMveQpPeTlsbktBcUxQTzQ1T3ByNUNSS1Q0QzZqOFpQT0JkN2ZyMTREK3dTeWk3NHFBUGtFcWNldTgzOWdjSUk5M1J0ClRsb1NwMzJJb25ud2loZ3l0WDZZWjkxWlhOaUNsM0NtRFlWL3ltNWlvZEwySHozYmo5QTJXWUFSbmtmMzUvcHoKYzVqV0RLd1N4SXlLdGNIVzR5bGh0eS9YMGlXZGQ4VG4xWm1nQkdHbXJKWmhCRjZKUWZKRGwyUnZQWE02MkFtNQpzU1pJbG53K0JNTmlSQ0FxNkdIY1RNa2JVemltRDJtMGtZUk1tNkQ2NVRNdTk2LzhrV2I0dDByU29sci91R2NzCk5tVVlvUytJL29FdHlVZzE2ZThmNEhmSkVJSWtMTWFjTVN0Smw1ZUZHK1gxTTZGcGZnZ3VUeDRkbkV3Z0RERHUKdW91eUdrM3huSVVhZytodVNwcGNnV1B5WTJvQUhNRWc0MGIweHd2UWdMaWh5cVoza28wVXRtWGU1WmxhelRpZgpBRFJBV0FSa1Mrdm1DZ2tHekkwN0ZqTEl4VkdVWndJREFRQUJBb0lDQUFmZ3duakpVOTVuK1ZZQzJ1QzFiL3FJClZoTXNPZmF1ckRVQ2xGSUJFVXpwWms2MFcrYjdWZmUwOHlQblhMeHZVRGxuSWEyN0VjTEtNd1hBM1FPL3FCY3QKVHVRSVRBZU9admovYk5yZnpYNmpWMlZNQmNRaWlOaEJXOXVGTFlYckpPZ0FkbWNiemNjWWlMa2lFY1ozcDBJcgpqd29ReGhud3loOWNNamhqTUlMZHNRR3IzZGkyenR6b3VGNFJ5ZnVOb3BMM2dpb0dmd0xQSHhYNXlGbXBlOC8yCkh0R1VRdDdGZkpOWVdmU0pLckdQRmxqMEo4WjRYYkdUR2FZN0RmVUdseDlxVXgvT1JBTEc3dVcrSEl1NkVsZU4KNDkyU1NqdCswOWhBdzdoU1hHdlZMcDd1d1l1YktWNXJqaUM2aW5YMFRkTm8yUTErSURCZXNrT21uTFdqRlN0Qgp0enRJbEFYWkszU2V4TWRYV0NLVDE3OE1rb0hvTzNOaXpqQ0FBZjFPdkRZVUNKWmRVME0zS05BNjNGbXVRQmJXCmhXZm1ZV0RXaXBJbUxpditnUkZqZnZYWkRoR1d4N0tOWW4raUswMjRuQ0hqNFVHS3FraFFkUTl1cE1xWGoyOFoKc0JLR3dXRzBCQWpCa0htb2VSUURxQVBPeEhKYTRudGhjSnppb0VjeWs1OXZLbFduVDhCZ2M3ZUxYNU5OclhzdApVZmwrNjRTbDJmY1JMUkEyR1hiLzZaclFEREFLcDZvUmdLRzVVT3p4bE12TnRYWm4zSnZ5c1FTVFpETXJLSmE5CkpZY3JMOE9QR3lvMDNRYWpjdkdjb0NieG4ycyt3c3ZZL2lIYk9GSW1YdFpqV2Q0Ynk4TXpyN0hVbkplR3krNlYKZDlEVTd6eHR0UkZwVHF4Mk15TnhBb0lCQVFEL09pTUZ0YVVwZlNzcWIzOHYzUitWdXpFM3lsdU1ydk9kd1hkMgpkdEswdnUwakR2SFpJWkovRFFjRmh6US90OEkzNjdwS0YrRVlQc2c5b1NxOHJpVUN0RVdpN0d3RG82NFJkVzlvClNuT2NJcHhFWHFqS0N0N0M3NlJNSk8vU25kalJpZ0pPUDY2eHF3emZhbW0wQVFpc0FZa0tkWXZiVUhreVR4NnoKc1oxQkRoUUdTODdVOERnTXh6aEpYV0QzQTNYb2UvTUdJdHdaRllUZlRld3ZSalRneUh0dGZRTTZYYTBFdU9CVgpScTNCV2FKNURxLzJTSjNFWDlOdjFFTFcyT2xZUVpTK3dpNjZ3RWpOeGc5NXBMVFNSWVMvVnVacmJwUmtQRUtTClhaeVZFdXIzc2R0VG90amRGY0pLUEFHT25hdHlGMFdyYmN5TitQajJteVllQkRVREFvSUJBUUR5TjhmSzM3OTAKWVh0WG1wOENxRXhDVkI5Tnd2eWptaDhBREU4NEtrSjdrdndTY05aQzYydVY4Z3YxeUVtWitUYWM0aVFGK1JTeAoxNWtsT1NtSHp5R3pEQ21BQ1pCV3pLaTdGN2pHSFRLaWVkeDhqZDN0elEvWEp3ZE5CK2R6WnRGUEdqZWhIUVNNClBSQmZrb09IYThNak9Vd0FybGxncWN5cUIvSXV4OHI1ekZITVV2a1JmK1FreWR5UTcrMmk1TmtKYmdXN0h5MGIKK04zcjFhUDhHQjhHODRFVFRubEZqWkw3VUNNK1RuMHNUeEdrazVyOWlsdFVaTFl2Rlh0UWF2eVFZcDNmSkFEMApXRno2V3FjNkM1SzAxcW1UK0JnbnBKWHdxZ0tld2xoa2tyMEFESzlRbWZOR3VCMFgzV2hLRUpXNFFZMWNjV1U4CnVUNC9NV2dkNUF2TkFvSUJBUUNYbzlrUEdWOXFDUjVPZGpSaEljWVVWa1hsMmVzTzZSdUJUV05IRlU0WGFhREgKUmFmWDFDU1FMQk5SNjRUVm5yNWNMMGhkb1ZaeDYwdFpvcG9ieEhQazZXcStaQzNBODgwR1BublV3dmR4ZXZiUgpnRlJVeHFTWHVYNHFaMys5NlY3YkVGNVNVMi9keTcwNE9LZFk5WXhMZGhZUUNzcnZvUjZCRDVVME9vRXVGOGs1Ci9HeUZBN3lwaXV3Y1dzaXp1bkNoa3BOUHdBSjVQTm5YT3hycTg1R1RSRXBoUVBkY0JEQTZNQVhKWk5iem0rZjIKZVExL0RLSC8vTmRKQ0JvMlFHWlRzNU5HeTJTc1BIYUZHL294MGZSRlFseWV1bWpveDZpTzdXYTRRN28yc0NpKwp4Z09ENjZ0aG4vM3gwVGt6bk9ZeVFUVjVweUR6OFVzcWFmLzVzWkkxQW9JQkFRQ01uRDhha2F0V0IyVVA1UTNjCkFCRk5EQUtrSk1aK3Z2Q3lHWE0vbXFDL2xnTkpQVUhVMVUrK1d5WUFSNFlhb1diSHlpdTVYL0JZa1YweEU2NzkKVFF3MklhQlIyTHQyK0JZWGpselFmWkN3YTJmSTBwNTc5dWYwTVk3MmM5a3owQU5BRldzbjEyMlZiN2w2a2RaVApIZ2JKQXZFUkVDV0lqT25uNXZiN216WkVyd3pwUFYyamdBZlVKMjhvb0cvbWVVMVpRUXFJcHorTGxueFY5TTdlCmdLNDZYYytYZ3AyNTk4YlVwNS9lQXJoOXFXVUhranlPWk94QjRMazJPaFU5Q082WGJ2aFEybGpIZ0NoeG1ZQ3MKbkoxTTU3VEgxbVZIVmk5STU1amZ5dGgvZ2dPLzdKMDFnRG1PMjBEZ1lzS3hCRkcyQmkvbTgxa2UyRGEvZnBILwprQ3dkQW9JQkFBSjNmMkRRVU5oOGxXTUs2eXdxNnUzMklYdDFSU21LeWYyL0xSaWFmL3h1T1FYb2ZUcGtpM1J5CjVheWpMSjJVd0dhbndZdzBlR1FaU1A4SGVuRENOVGRMeVNLNzNZZEJmOFkwWGgzQk9UUGtJZzBXNFRMWlg2NUQKLy9KdUxuQVRWQnR3RzBSQ2F0S2tkWGVQaTNnNzc2VE04ajhxV2VzNmpkdk1GdS9TNFZoR1pSdGhoYWFpZTdNdApwY3Y3bTFSQWtkNjVCL0h3TThTNXpqQVFFTmFqUHpRTURqNHJ0VUt1OTdjRGlVcHR6UkNtcnBDdW9EcVBxTm4yClVXZkkyOTd5YUd3c21jZ1hFc3VRc1FYWjlLVTFzVmwyT09oV3dBWFlUQnpiVGVocXR0R2txTldSYmJDSjBSdVIKbm1MOC94bnNtYlRlQUREUmY0ZFZDZGhvYXExTUZiUT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=